/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -p 6 public/closets.glb
*/

import React, { useEffect, useRef, useState } from "react";
import { CameraControls, OrbitControls, useGLTF } from "@react-three/drei";
import { useSpring, animated, config } from "@react-spring/three";
import { useAnimations } from "../hooks/useAnimations";
import { Texts } from "./Texts";

export function Closets(props) {
  const { nodes, materials } = useGLTF("/closets.glb");
  const camRef = useRef();
  const [closetsAnimation, setClosets] = useState({
    inbouw: false,
    vrijstaand: false,
    schuin: false,
    zwevend: false,
    uShape: false,
    lShape: false,
    dressoir: false,
  });
  const [camPos, setCamPos] = useState([0, 1, 2]);
  const [camTarget, setTarget] = useState([0, 0, -3]);
  const Controls = animated(OrbitControls);

  const {
    inbouwPosition1,
    inbouwPosition2,
    inbouwPosition3,
    inbouwMainRotation,
    inbouwSecondRotation,
    inbouwThirdRotation,
    vrijstaandMainRotation,
    vrijstaandSecondRotation,
    vrijstaandThirdRotation,
    vrijstaandPosition1,
    vrijstaandPosition2,
    vrijstaandPosition3,
    schuinMainRotation,
    schuinSecondRotation,
    schuinThirdRotation,
    schuinPosition1,
    schuinPosition2,
    schuinPosition3,
    zwevendMainRotation,
    zwevendSecondRotation,
    zwevendThirdRotation,
    uShapeMainRotation,
    uShapePosition1,
    uShapePosition2,
    uShapePosition3,
    lShapeMainRotation,
    lShapeSecondRotation,
    lShapeThirdRotation,
  } = useAnimations(closetsAnimation);

  const { position, target } = useSpring({
    position: camPos,
    target: camTarget,
    config: config.molasses,
  });

  return (
    <>
      <animated.group
        {...props}
        dispose={null}
        onPointerMissed={() => {
          setCamPos([0, 1, 2]);
          setTarget([0, 0, -4]);
        }}
      >
        <animated.mesh
          geometry={nodes.dressoir.geometry}
          material={nodes.dressoir.material}
          position={[1.380738, 0.6638, 0.122036]}
          onPointerEnter={() => {
            setClosets((prev) => ({ ...prev, dressoir: true }));
          }}
          onPointerLeave={() => {
            setClosets((prev) => ({ ...prev, dressoir: false }));
          }}
        >
          <animated.mesh geometry={nodes.door_plate.geometry} material={nodes.door_plate.material} position={[-2.874, -0.2728, 0.26]} />
          <animated.mesh geometry={nodes.door_plate001.geometry} material={nodes.door_plate001.material} position={[-1.88, -0.2728, 0.26]} />
          <animated.mesh geometry={nodes.door_plate002.geometry} material={nodes.door_plate002.material} position={[-1.886, -0.2728, 0.26]} />
          <animated.mesh geometry={nodes.door_plate003.geometry} material={nodes.door_plate003.material} position={[-0.892, -0.2728, 0.26]} />
          <animated.mesh geometry={nodes.door_plate004.geometry} material={nodes.door_plate004.material} position={[-0.898, -0.2728, 0.26]} />
          <animated.mesh geometry={nodes.door_plate005.geometry} material={nodes.door_plate005.material} position={[0.096, -0.2728, 0.26]} />
        </animated.mesh>
        <animated.mesh
          geometry={nodes.inbouw002.geometry}
          material={nodes.inbouw002.material}
          position={[1.3, 0.705525, 0.085393]}
          onPointerDown={() => {
            setCamPos([1.3, 0.9, 0.6]);
            setTarget([1.3, 0.9, 0]);
          }}
          onPointerEnter={() => {
            setClosets((prev) => ({ ...prev, inbouw: true }));
            document.body.style.cursor = "pointer";
          }}
          onPointerLeave={() => {
            setClosets((prev) => ({ ...prev, inbouw: false }));
            document.body.style.cursor = "default";
          }}
          rotation={inbouwMainRotation}
        >
          <animated.mesh rotation={inbouwSecondRotation} geometry={nodes.door_plate006.geometry} material={nodes.door_plate006.material} position={[-0.099352, 0.164887, 0.104825]} />
          <animated.mesh rotation={inbouwThirdRotation} geometry={nodes.door_plate007.geometry} material={nodes.door_plate007.material} position={[0.004062, 0.164887, 0.001411]} />
          <animated.mesh rotation={inbouwSecondRotation} geometry={nodes.door_plate008.geometry} material={nodes.door_plate008.material} position={[0.001411, 0.164887, 0.004062]} />
          <animated.mesh rotation={inbouwThirdRotation} geometry={nodes.door_plate009.geometry} material={nodes.door_plate009.material} position={[0.104825, 0.164887, -0.099352]} />
          <animated.mesh geometry={nodes.inbouw003.geometry} material={nodes.inbouw003.material} position={inbouwPosition1} />
          <animated.mesh geometry={nodes.inbouw004.geometry} material={nodes.inbouw004.material} position={inbouwPosition2} />
          <animated.mesh geometry={nodes.inbouw005.geometry} material={nodes.inbouw005.material} position={inbouwPosition3} />
        </animated.mesh>
        <animated.mesh
          rotation={vrijstaandMainRotation}
          geometry={nodes.vrijstaand001.geometry}
          material={nodes.vrijstaand001.material}
          position={[0.9, 0.707797, 0.090544]}
          onPointerDown={() => {
            setCamPos([0.95, 0.9, 0.6]);
            setTarget([0.95, 0.9, 0]);
          }}
          onPointerEnter={() => {
            setClosets((prev) => ({ ...prev, vrijstaand: true }));
            document.body.style.cursor = "pointer";
          }}
          onPointerLeave={() => {
            setClosets((prev) => ({ ...prev, vrijstaand: false }));
            document.body.style.cursor = "default";
          }}
        >
          <animated.mesh rotation={vrijstaandSecondRotation} geometry={nodes.door_plate010.geometry} material={nodes.door_plate010.material} position={[-0.100837, 0.168637, 0.10631]} />
          <animated.mesh rotation={vrijstaandThirdRotation} geometry={nodes.door_plate011.geometry} material={nodes.door_plate011.material} position={[0.002153, 0.168637, 0.00332]} />
          <animated.mesh geometry={nodes.schuif1.geometry} material={nodes.schuif1.material} position={vrijstaandPosition1} />
          <animated.mesh geometry={nodes.schuif2.geometry} material={nodes.schuif2.material} position={vrijstaandPosition2} />
          <animated.mesh geometry={nodes.schuif3.geometry} material={nodes.schuif3.material} position={vrijstaandPosition3} />
        </animated.mesh>
        <animated.mesh
          rotation={schuinMainRotation}
          geometry={nodes.schuin001.geometry}
          material={nodes.schuin001.material}
          position={[-0.05, 0.70254, 0.113959]}
          onPointerDown={() => {
            setCamPos([0, 0.9, 0.6]);
            setTarget([0, 0.9, 0]);
          }}
          onPointerEnter={() => {
            setClosets((prev) => ({ ...prev, schuin: true }));
            document.body.style.cursor = "pointer";
          }}
          onPointerLeave={() => {
            setClosets((prev) => ({ ...prev, schuin: false }));
            document.body.style.cursor = "default";
          }}
        >
          <animated.mesh rotation={schuinSecondRotation} geometry={nodes.door_plate012.geometry} material={nodes.door_plate012.material} position={[-0.096205, 0.164888, 0.101678]} />
          <animated.mesh rotation={schuinThirdRotation} geometry={nodes.door_plate013.geometry} material={nodes.door_plate013.material} position={[0.004522, 0.164888, 0.000951]} />
          <animated.mesh rotation={schuinSecondRotation} geometry={nodes.door_plate014.geometry} material={nodes.door_plate014.material} position={[0.006254, 0.164888, -0.000781]} />
          <animated.mesh rotation={schuinThirdRotation} geometry={nodes.door_plate015.geometry} material={nodes.door_plate015.material} position={[0.106982, 0.164888, -0.101509]} />
          <animated.mesh geometry={nodes.schuif1001.geometry} material={nodes.schuif1001.material} position={schuinPosition1} />
          <animated.mesh geometry={nodes.schuif2001.geometry} material={nodes.schuif2001.material} position={schuinPosition2} />
          <animated.mesh geometry={nodes.schuif3001.geometry} material={nodes.schuif3001.material} position={schuinPosition3} />
        </animated.mesh>

        <animated.mesh
          rotation={zwevendMainRotation}
          onPointerDown={() => {
            setCamPos([0.4, 0.9, 0.6]);
            setTarget([0.4, 0.9, 0]);
          }}
          onPointerEnter={() => {
            setClosets((prev) => ({ ...prev, zwevend: true }));
            document.body.style.cursor = "pointer";
          }}
          onPointerLeave={() => {
            setClosets((prev) => ({ ...prev, zwevend: false }));
            document.body.style.cursor = "default";
          }}
          geometry={nodes.zwevend.geometry}
          material={nodes.zwevend.material}
          position={[0.4, 0.804421, 0.035782]}
        >
          <animated.mesh rotation={zwevendSecondRotation} geometry={nodes.door_plate016.geometry} material={nodes.door_plate016.material} position={[-0.108962, 0.000681, 0.206054]} />
          <animated.mesh rotation={zwevendThirdRotation} geometry={nodes.door_plate017.geometry} material={nodes.door_plate017.material} position={[-0.003532, 0.000681, 0.100625]} />
          <animated.mesh rotation={zwevendSecondRotation} geometry={nodes.door_plate018.geometry} material={nodes.door_plate018.material} position={[0.100625, 0.000681, -0.003532]} />
          <animated.mesh rotation={zwevendThirdRotation} geometry={nodes.door_plate019.geometry} material={nodes.door_plate019.material} position={[0.206054, 0.000681, -0.108962]} />
        </animated.mesh>
        <animated.mesh
          rotation={uShapeMainRotation}
          geometry={nodes.uShape.geometry}
          material={nodes.uShape.material}
          position={[-0.7, 0.710548, -0.034334]}
          onPointerDown={() => {
            setCamPos([-0.7, 0.9, 0.6]);
            setTarget([-0.7, 0.9, 0]);
          }}
          onPointerEnter={() => {
            setClosets((prev) => ({ ...prev, uShape: true }));
            document.body.style.cursor = "pointer";
          }}
          onPointerLeave={() => {
            setClosets((prev) => ({ ...prev, uShape: false }));
            document.body.style.cursor = "default";
          }}
        >
          <animated.mesh position={uShapePosition1} geometry={nodes.back_panel_bottom002.geometry} material={nodes.back_panel_bottom002.material} />
          <animated.mesh position={uShapePosition2} geometry={nodes.back_panel_bottom003.geometry} material={nodes.back_panel_bottom003.material} />
          <animated.mesh position={uShapePosition3} geometry={nodes.back_panel_bottom004.geometry} material={nodes.back_panel_bottom004.material} />
        </animated.mesh>
        <animated.mesh
          rotation={lShapeMainRotation}
          geometry={nodes.lshape.geometry}
          material={nodes.lshape.material}
          position={[-1.2, 0.705958, 0.01079]}
          onPointerDown={() => {
            setCamPos([-1.2, 0.9, 0.6]);
            setTarget([-1.2, 0.9, 0]);
          }}
          onPointerEnter={() => {
            setClosets((prev) => ({ ...prev, lShape: true }));
            document.body.style.cursor = "pointer";
          }}
          onPointerLeave={() => {
            setClosets((prev) => ({ ...prev, lShape: false }));
            document.body.style.cursor = "default";
          }}
        >
          <animated.mesh rotation={lShapeSecondRotation} geometry={nodes.door_plate020.geometry} material={nodes.door_plate020.material} position={[-0.104868, 0.168638, 0.11034]} />
          <animated.mesh rotation={lShapeThirdRotation} geometry={nodes.door_plate021.geometry} material={nodes.door_plate021.material} position={[0.00682, 0.168638, -0.001347]} />
          <animated.mesh rotation={lShapeSecondRotation} geometry={nodes.door_plate022.geometry} material={nodes.door_plate022.material} position={[0.008199, 0.168638, -0.002726]} />
          <animated.mesh rotation={lShapeThirdRotation} geometry={nodes.door_plate023.geometry} material={nodes.door_plate023.material} position={[0.119886, 0.168638, -0.114413]} />
        </animated.mesh>
      </animated.group>
      <Texts closetsAnimation={closetsAnimation} />
      {/* <OrbitControls object-position={[0, 1.5, 2]} target={[0, 0, -1]} /> */}
      <Controls ref={camRef} makeDefault={true} target={target} object-position={position} enableZoom={false} enablePan={false} enableRotate={false} />
    </>
  );
}

useGLTF.preload("/closets.glb");
